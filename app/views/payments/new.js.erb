$("#modal-sale-product").html("<%= j (render partial: 'shared/modal', locals:{ size: 'xl' } ) %>")

setInputDate("#payment_date")
payment.reset()

payment.date = document.getElementById('payment_date').value
payment.valor_cuota = parseFloat(<%= @fee.total_value %>)
payment.adeuda = parseFloat(<%= @adeuda %>)

if (<%= @apply_arrear %>) {
	// Si corresponde, manejamos los campos del interes/recargo sugerido
	payment.recargo_sugerido = parseFloat(<%= @interes_sugerido %>)
	document.getElementById('payment_aply_interest').checked = true
	document.getElementById('payment_interest').value = payment.recargo_sugerido
	document.getElementById('payment_aply_interest').addEventListener('click', function(event) {
		$( '#payment_interest').prop("disabled", !this.checked )
		if ( this.checked ) {
			payment.recargo_sugerido = parseFloat(<%= @interes_sugerido %>)
			document.getElementById('payment_interest').value = <%= @interes_sugerido %>
			document.getElementById('payment_total_to_pay').innerHTML = `$${numberFormat.format(payment.total_to_pay())}`
		} else {
			payment.recargo_sugerido = 0.0
			document.getElementById('payment_interest').value = payment.recargo_sugerido
			document.getElementById('payment_total_to_pay').innerHTML = `$${numberFormat.format(payment.total_to_pay())}`
		}
	})
} else {
	// Si no corresponde aplicar interes solo se paga la cuota 
	document.querySelector('#form-payment #esta_vencido').style.display = 'none'
}

$("#modal-sale-product").modal('show')

document.getElementById('payment_interest').addEventListener('change', function(event) {
	payment.recargo_sugerido = parseFloat( this.value )
	if (!isNaN( payment.recargo_sugerido )) {
		addClassValid(this)
		document.getElementById('payment_total_to_pay').innerHTML = `$${numberFormat.format(payment.total_to_pay() )}`
	} else {
		payment.recargo_sugerido = 0.0
		document.getElementById('payment_interest').value = payment.recargo_sugerido
		document.getElementById('payment_total_to_pay').innerHTML = `$${numberFormat.format(payment.sumar_sin_recargo() )}`
	}
})


document.getElementById('payment_adjust').addEventListener('change', function(event) {
	payment.ajuste = parseFloat( this.value )
	if (!isNaN( payment.ajuste )) {
		addClassValid(this)
		document.getElementById('payment_total_to_pay').innerHTML = `$${numberFormat.format(payment.total_to_pay())}`
	} else {
		payment.ajuste = 0.0
		document.getElementById('payment_adjust').value = payment.ajuste
		document.getElementById('payment_total_to_pay').innerHTML = `$${numberFormat.format(payment.sumar_sin_ajuste())}`
	}
})

function set_exchange(){
  const select = event.target
  const nodo = event.target.parentElement.parentElement
  const selected = select.options[select.selectedIndex]
  const tomado_en = nodo.querySelector('#payment_value_in_pesos')
  const calculo_en_pesos = nodo.querySelector('#payment_calculo_en_pesos')
  if (selected.dataset.exchange == "true") {
    tomado_en.value = ''
    tomado_en.placeholder = `1 ${selected.dataset.currency} en $`
    tomado_en.style.display = 'block'
    calculo_en_pesos.style.display = 'block'
  } else {
    tomado_en.value = 1
    tomado_en.style.display = 'none'
    calculo_en_pesos.style.display = 'none'
  }

  if ( valid_number(parseFloat(tomado_en.value)) || valid_number( parseFloat(nodo.querySelector('#payment_payment').value) ) ) {
    calc_valor_en_pesos()
  }
}

function calc_valor_en_pesos(){
	const payment_value = parseFloat(document.getElementById('payment_payment').value)
	const exchange_value = parseFloat(document.getElementById('payment_value_in_pesos').value)
	const calculo_en_pesos = document.getElementById('payment_calculo_en_pesos')
	if ( !valid_number(exchange_value) || !valid_number(payment_value) ) {
		calculo_en_pesos.value = 0
		return
	}
	calculo_en_pesos.value = payment_value*exchange_value
}

document.getElementById('payment_payment').addEventListener('change', function(e) {
	payment_pay( e,this, 'payment' )
})

document.getElementById('payment_value_in_pesos').addEventListener('change', function(e) {
	payment_pay( e,this, 'tomado_en' )
})

function payment_pay( event, input, atributo ) {
	// ingresa monto pagado o en cuanto toma una moneda 
	// en caso de error seteo clase invalid
	let data = parseFloat(event.target.value)
	if (isNaN( data )) {
		data = 0.0
		addClassInvalid(input)
	} else {
		addClassValid(input)
	}

	if (atributo === 'payment') {
		payment.payment = data
	} else {
		payment.tomado_en = data
	}
	calc_valor_en_pesos()
}


document.getElementById('submit-form-payment').addEventListener('click', function(e){
	e.preventDefault()
	e.stopPropagation()
	payment.sale_id = <%= @sale_id %>;
	payment.form_data = new FormData()
	payment.form_data.append("payment[sale_id]", document.getElementById('payment_sale_id').value)
	payment.form_data.append("fee_id", document.getElementById('payment_fee_id').value)
	payment.form_data.append("aply_interest", document.getElementById('payment_aply_interest').value)
	payment.form_data.append("comment_adjust", document.getElementById('payment_comment_adjust').value )
	payment.form_data.append("payment[payments_currency_id]", document.getElementById('payments_currency_id').value)
	payment.form_data.append("payment[comment]", document.getElementById('payment_name_pay').value)
	payment.form_data.append("comment", document.getElementById('payment_comment').value)
	// valores numericos
	payment.form_data.append("interest", parseFloat( document.getElementById('payment_interest').value ) )
	payment.form_data.append("adjust",  parseFloat( document.getElementById('payment_adjust').value ) )
	payment.form_data.append("payment[payment]", parseFloat( document.getElementById('payment_payment').value ) )
	payment.form_data.append("payment[taken_in]", parseFloat( document.getElementById('payment_value_in_pesos').value ) )
	payment.form_data.append("calculo_en_pesos", parseFloat( document.getElementById('payment_calculo_en_pesos').value ) )
	payment.form_data.append("payment[date]", document.getElementById('payment_date').value)

	let files = document.getElementById('payment-images')
  let totalFiles = files.files.length
  if (totalFiles > 0) {
  	for (let i = 0; i < totalFiles; i++) {
	    payment.form_data.append("payments[images][]", files.files[i])
	  }
  }

  if (!form_payment_validation()) {
  	return
  }

  $("#modal-pay-confirm").html("<%= j (render 'modal_confirm') %>")

  let pay_data = document.querySelector('#pay-data')

  pay_data.innerHTML += `<tr><td><b>Fecha de pago:</b> ${ format_date(payment.form_data.get('payment[date]')) }</td></tr>` 
  if (document.getElementById('payment_aply_interest').checked) {
  	pay_data.innerHTML += `<tr><td><b>Interes:</b> $${ numberFormat.format( payment.form_data.get('interest') )}</td></tr>` 
  }
  if ( payment.form_data.get('adjust') > 0 ) {
  	pay_data.innerHTML += `<tr><td><b>Ajuste:</b> $${ numberFormat.format( payment.form_data.get('adjust') )}</td></tr>` 
  }

  let currency_selected = document.getElementById('payments_currency_id').options[document.getElementById('payments_currency_id').selectedIndex]
  let currency_name = currency_selected.text

  if( currency_selected.dataset.exchange == 'true' ) {
  	pay_data.innerHTML += `
  		<tr><td><b>Forma de pago:</b> ${currency_name}</td></tr>
  		<tr><td><b>Ingresado:</b>  ${numberFormat.format( payment.form_data.get('payment[payment]') )}</td></tr>
  		<tr><td><b>Tomado en:</b>  $${numberFormat.format( payment.form_data.get('payment[taken_in]') )}</td></tr>
  		<tr><td><b>Valor en pesos:</b>  ${numberFormat.format( payment.form_data.get('calculo_en_pesos') )}</td></tr>
  		<tr><td><b>Detalle:</b> ${payment.form_data.get('payment[comment]')} </td></tr>
  	` 
  }

  if (currency_selected.dataset.exchange == 'false') {
  	pay_data.innerHTML += `
  		<tr><td><b>Forma de pago:</b> ${currency_name}</td></tr>
  		<tr><td><b>Ingresado:</b>  $${numberFormat.format( payment.form_data.get('payment[payment]') )}</td></tr>
  		<tr><td><b>Detalle:</b> ${payment.form_data.get('payment[comment]')} </td></tr>
  	` 
  }
	$("#modal-pay-confirm").modal('show')
	
})

function form_payment_validation() {
	if (document.getElementById('payments_currency_id').value == '0') {
  	addClassInvalid(document.getElementById('payments_currency_id'))
  	noty_alert('error', 'Debe seleccionar un tipo de pago')
  	return false
  } else {
  	addClassValid(document.getElementById('payments_currency_id'))
  }

  if ( !valid_number( payment.form_data.get('payment[payment]') ) ) {
  	noty_alert('error', 'El pago no es valido')
  	addClassInvalid(document.getElementById('payment_payment'))
  	return false
  }
  if ( isNaN( payment.form_data.get('payment[taken_in]') ) || payment.form_data.get('payment[taken_in]') <= 0 ) {
  	noty_alert('error', 'El valor no es valido')
  	addClassInvalid(document.getElementById('payment_value_in_pesos'))
  	return false
  }
  if ( isNaN( payment.form_data.get('calculo_en_pesos') ) || payment.form_data.get('calculo_en_pesos') <= 0 ) {
  	noty_alert('error', 'Datos invalidos')
  	addClassInvalid(document.getElementById('payment_calculo_en_pesos'))
  	return false
  }
  if (<%= @apply_arrear %>) {
  	if ( isNaN( payment.form_data.get('interest') ) ) {
	  	noty_alert('error', 'El valor de interes ingresado no es valido')
	  	addClassInvalid(document.getElementById('payment_interest'))
	  	return false
	  }
  }

  if ( document.getElementById('payment_aply_interest').checked && payment.form_data.get('interest') <= 0 ) {
  	noty_alert('error', 'Debe ingresar un valor en interes')
  	addClassInvalid(document.getElementById('payment_interest'))
  	return false
  }

  if ( isNaN( payment.form_data.get('calculo_en_pesos') ) || payment.form_data.get('calculo_en_pesos') <= 0 ) {
  	noty_alert('error', 'Datos invalidos')
  	addClassInvalid(document.getElementById('payment_calculo_en_pesos'))
  	return false
  }

  if ( payment.form_data.get('payment[date]') == ''  ) {
  	noty_alert('error', 'Debe ingresar una fecha')
  	addClassInvalid(document.getElementById('payment_date'))
  	return false
  }

  return true
}

function send_payment(){
	fetch(`/payments`, {
      method: 'POST',
      headers: {           
        'X-CSRF-Token': document.getElementsByName('csrf-token')[0].content,
      },
      body: payment.form_data,
    }
  )
  .then( response => response.json() )
  .then( response => {
  	if (response.status === 'success') {
  		location.reload()
  	}
  	noty_alert(response.status, response.msg)
  } )
  .catch( error => noty_alert('error', 'Ocurrio un error, no se pudo registrar el pago') )
}

document.getElementById('payment_date').addEventListener('change', e => {
	if (<%= @apply_arrear %>) {
		const interes_diario = <%= @interes_diario %>;
		const end_date = new Date(e.target.value)
		const start_date = new Date(document.getElementById('payment_start_date_owes').value)
		const diffInDays = Math.floor((end_date - start_date) / (1000 * 60 * 60 * 24));
		document.getElementById("payment_interest").value = (interes_diario * diffInDays).toFixed(2)
		debugger
	}
})